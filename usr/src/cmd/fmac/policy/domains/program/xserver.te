#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Original files contributed to OpenSolaris.org under license by the
# United States Government (NSA) to Sun Microsystems, Inc.
#

#
# xserver_exec_t is the type of the Xwrapper executable.
#
type xserver_exec_t, file_type, sysadmfile, exec_type;


#################################
#
# xserver_domain(user_domain)
#
# Define an X server domain for a user domain.
# FIXME!  The X server requires far too many privileges.
#
define(`xserver_domain',`

type $1_xserver_t, domain, privlog, privmem;
type $1_xserver_tmp_t, file_type, sysadmfile, tmpfile;

# Enter by the Xwrapper executable.
domain_auto_trans($1_t, xserver_exec_t, $1_xserver_t)

# Allow the user domain to signal the X server for termination.
allow $1_t $1_xserver_t:process signal;

# Allow the user domain to connect to the X server.
can_unix_connect($1_t, $1_xserver_t)
allow $1_t $1_xserver_tmp_t:sock_file rw_file_perms;
allow $1_t $1_xserver_tmp_t:dir r_dir_perms;

# Create temporary files.
file_type_auto_trans($1_xserver_t, tmp_t, $1_xserver_tmp_t)

# Signal the user domain.
allow $1_xserver_t $1_t:process signal;

# Use capabilities.
# FIXME!  Should separate the portion of the X server that requires sys_rawio.
allow $1_xserver_t $1_xserver_t:capability { net_bind_service setuid setgid chown dac_override sys_rawio };

# Use /dev/mem.  Yuck.
# FIXME!  Should separate the portion of the X server that requires /dev/mem access.
allow $1_xserver_t memory_device_t:chr_file rw_file_perms;

# Access ttys.
allow $1_xserver_t $1_tty_device_t:chr_file rw_file_perms;
allow $1_xserver_t tty_device_t:chr_file rw_file_perms;

# Get network interface configuration.
allow $1_xserver_t kernel_t:system { net_io_control };
allow $1_xserver_t netif_type:netif getattr;

# Run helper programs in $1_xserver_t.
can_exec_any($1_xserver_t)

# Use the network
can_network($1_xserver_t)

# Connect to xfs.
can_unix_connect($1_xserver_t, xfs_t)
allow $1_xserver_t xfs_tmp_t:dir r_dir_perms;
allow $1_xserver_t xfs_tmp_t:sock_file rw_file_perms;

# Inherit and use descriptors from login.
allow $1_xserver_t local_login_t:fd inherit_fd_perms;

# Bind to the X server socket in /tmp.
allow $1_xserver_t $1_xserver_tmp_t:unix_stream_socket name_bind;

# Use /dev/psaux.
allow $1_xserver_t psaux_t:chr_file rw_file_perms;

')


