#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Copyright 2008 Sun Microsystems, Inc.  All rights reserved.
# Use is subject to license terms.
#

#
# Original files contributed to OpenSolaris.org under license by the
# United States Government (NSA) to Sun Microsystems, Inc.
#

#################################
#
# Rules for the newrole_t domain.
#
# newrole_t is the domain for the newrole program.
# newrole_exec_t is the type of the newrole executable.
#
type newrole_t, domain, privrole, privlog, auth;
type newrole_exec_t, file_type, exec_type;

# Inherit descriptors from the current session.
allow newrole_t remote_login_t:fd inherit_fd_perms;
allow newrole_t local_login_t:fd inherit_fd_perms;

# Execute /sbin/pwdb_chkpwd to check the password.
can_exec(newrole_t, chkpwd_exec_t)

# Use the network.
can_network(newrole_t)

# Allow newrole_t to transition to user domains.
domain_trans(newrole_t, shell_exec_t, userdomain)

# No need for privilege increase protections on newrole -> user shell transition.
allow newrole_t { user_t sysadm_t }:process noprivinc;

# Use capabilities.
allow newrole_t self:capability { setuid setgid net_bind_service dac_override };

# Read password files
allow newrole_t shadow_t:file r_file_perms;

# Write to utmp
allow newrole_t initrc_var_run_t:file rw_file_perms;

#
# Allow sysadm_t to reap a user_t process 
# created via newrole.
#
allow user_t sysadm_t:process { sigchld };

#
# Allow newrole to relabel TTY's
#
allow newrole_t user_tty_device_t:chr_file { relabelfrom relabelto };
allow newrole_t sysadm_tty_device_t:chr_file { relabelfrom relabelto };

allow newrole_t sysadm_devpts_t:chr_file { relabelfrom relabelto };
allow newrole_t user_devpts_t:chr_file { relabelfrom relabelto };

#
# Allow TTY's types to transition into each other
#
allow sysadm_tty_device_t user_tty_device_t:chr_file transition;
allow user_tty_device_t sysadm_tty_device_t:chr_file transition;

allow sysadm_devpts_t user_devpts_t:chr_file transition;
allow user_devpts_t sysadm_devpts_t:chr_file transition;

#
# TTY type transition rules
#
type_change sysadm_t user_tty_device_t:chr_file sysadm_tty_device_t;
type_change user_t sysadm_tty_device_t:chr_file user_tty_device_t;

type_change sysadm_t user_devpts_t:chr_file sysadm_devpts_t;
type_change user_t sysadm_devpts_t:chr_file user_devpts_t;

#
# Allow newrole to open descriptors 0..2 (as the appropriate type)
#
allow newrole_t sysadm_t:fd create;
allow newrole_t user_t:fd create;

# Check the validity of security contexts.
# Used by pam unix_cred.
allow newrole_t security_t:security check_context;
