#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the
# Common Development and Distribution License (the "License").
# You may not use this file except in compliance with the License.
#
# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE
# or http://www.opensolaris.org/os/licensing.
# See the License for the specific language governing permissions
# and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each
# file and include the License file at usr/src/OPENSOLARIS.LICENSE.
# If applicable, add the following below this CDDL HEADER, with the
# fields enclosed by brackets "[]" replaced with your own identifying
# information: Portions Copyright [yyyy] [name of copyright owner]
#
# CDDL HEADER END
#

#
# Original files contributed to OpenSolaris.org under license by the
# United States Government (NSA) to Sun Microsystems, Inc.
#

#################################
#
# Rules for the sshd_t domain, et al.
#
# sshd_t is the domain for the sshd program.
# sshd_login_t is the domain for sshd's login spawn
# sshd_exec_t is the type of the sshd executable.
# sshd_key_t is the type of the ssh private key files
#
type sshd_t, domain, privuser, privrole, privlog, auth;
type sshd_exec_t, file_type, exec_type;
type sshd_key_t, file_type;

# Inherit and use descriptors from init.
allow sshd_t init_t:fd inherit_fd_perms;

# Use the network.
can_network(sshd_t)

# Can create pty's
can_create_pty(sshd)

# Use privileges
allow sshd_t self:privilege_class_set { proc_setid net_privaddr contract_event  file_dac_write proc_taskid };

# Create /var/run/sshd.pid
type sshd_var_run_t, file_type, sysadmfile, pidfile;
file_type_auto_trans(sshd_t, var_run_t, sshd_var_run_t)

# Access key files
allow sshd_t sshd_key_t:file rw_file_perms;

# kerberos library always tries to open /etc/krb5/krb5.conf with write access.
dontaudit sshd_t etc_t:file write;

# Create/update /var/adm/lastlog and utmpx.
allow sshd_t var_log_t:dir rw_dir_perms;
allow sshd_t var_log_t:file create_file_perms;

# Append to wtmp
allow sshd_t wtmp_t:file append;

# Runs /sbin/sh.
can_exec(sshd_t, shell_exec_t)

# Runs /usr/bin/locale.
can_exec(sshd_t, bin_t)

# Transition to user domains upon shell invocation.
domain_trans(sshd_t, shell_exec_t, user_t)
domain_trans(sshd_t, shell_exec_t, sysadm_t)

# No need for privilege increase protections on sshd -> user shell transition.
allow sshd_t { user_t sysadm_t }:process noprivinc;

# Read /etc/shadow
allow sshd_t shadow_t:file r_file_perms;

# Relabel ptys.
allow sshd_t sshd_devpts_t:chr_file { relabelfrom relabelto };
allow sshd_t user_devpts_t:chr_file { relabelto relabelfrom getattr };

allow sshd_devpts_t user_devpts_t:chr_file transition;
allow user_devpts_t sshd_devpts_t:chr_file transition;

# Tell it how to relabel them
type_change user_t sshd_devpts_t:chr_file user_devpts_t;

# Check the validity of security contexts.
# Used by pam unix_cred. 
allow sshd_t security_t:security check_context;
